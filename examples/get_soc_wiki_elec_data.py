# -*- coding: utf-8 -*-
"""get_SOC-WIKI-ELEC_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xAApXqJJxIUrSJVQDyazz1vqt-SrNCn-

# SOC-WIKI-ELEC

Reference: 
    -http://networkrepository.com/soc-wiki-elec.php

**Describe**: 
> The dataset contains all administrator elections and vote history data based on the latest complete dump of Wikipedia page edit history (from January 3 2008).

# Library
"""

import pandas as pd
import networkx as nx
import requests
import zipfile
from datetime import datetime
import os

"""# Download"""

link_dts = 'http://nrvis.com/download/data/dynamic/soc-wiki-elec.zip'
dts_zip = 'soc-wiki-elec.zip'
dts_name = 'soc-wiki-elec.edges'

r1 = requests.get(link_dts, allow_redirects=True)
open(dts_zip, 'wb').write(r1.content)

with zipfile.ZipFile(dts_zip, 'r') as zip_ref:
    zip_ref.extractall()

"""# Handle data"""

df = None
with open(dts_name, 'r') as fi:
    lines = fi.readlines() 
    print(lines[:6])
    lines = lines[4:]
    lines_ = [list(map(int, line.strip().split())) for line in lines ]
    print(lines_[:4])
    df = pd.DataFrame(data=lines_, columns=['node_1', 'node_2', 'weight', 'timestamp'])

print()
print(df.dtypes)

df.info()

df.describe()

"""We will drop `weight` column and which row has value `timestamp = 0`. We can not create a temporal network without getting time stamp"""

pd.unique(df['weight'])

# df.drop(columns='weight', inplace=True)

# df = df[df.timestamp != 0]

# df.describe()

"""# Creating dynamic graph
Divide timestamp to `k` bin means `k` graph. Afterthat, we have 1 dynamic graph with `k` snapshot (static graph)
"""

k = 8

timestamp_range = (df.timestamp.max() - df.timestamp.min() + 1)//k 
timestamp_range

graphs_df = []
print("Start time: ", datetime.fromtimestamp(df.timestamp.min()) )
for i in range(k):
    upper_time = df.timestamp.min() + timestamp_range*(i+1)
    print(f"[{i}|\tUpper_time= {datetime.fromtimestamp(upper_time)}\t |Row|= {len(df[df.timestamp<upper_time])}")
    if i == k-1:
        graph_df = df.copy()
    else:
        graph_df = df[df.timestamp<upper_time].copy()
        # print(len(graph_df))
        graph_df = graph_df[graph_df['weight']==1]
        # print(len(graph_df))

    graphs_df.append(graph_df)

graphs = []
for i in range(k):
    g = nx.from_pandas_edgelist(graphs_df[i], "node_1", "node_2", create_using=nx.Graph())
    graphs.append(g)
    print(f"Graph {i+1}:\t|V|={g.number_of_nodes()} \t|E|={g.number_of_edges()} \t|Isolate|={nx.number_of_isolates(g)}")

"""# Save dynamic graph"""

NUMBER_SAVE_GRAPH = 8

folder = "./data/"
if not os.path.exists(folder):
    os.makedirs(folder)

for i in range(min(NUMBER_SAVE_GRAPH, k)):
    nx.write_edgelist(graphs[i],f'{folder}/graph_{str(i//10)+str(i%10)}.edgelist',data=False)

