# -*- coding: utf-8 -*-
"""get_fb_wosn_friends_data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RFZyA-RmAgoXnLh0OV2ZdMjbCFrarD3L

# FB-WOSN-FRIENDS

Reference: http://networkrepository.com/fb-wosn-friends.php

**Describe**: 
> Facebook friendship graph where nodes are users and edges between the users represent friendship relations/edges. The fourth column represents the time of an edge (unix timestamp). Note that some edge timestamps are missing and are assigned 0.

# Library
"""

import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import tensorflow as tf
import requests
import zipfile
from datetime import datetime
import os

"""# Download"""

link_dts = 'http://nrvis.com/download/data/dynamic/fb-wosn-friends.zip'
dts_zip = 'fb-wosn-friends.zip'
dts_name = 'fb-wosn-friends.edges'

r1 = requests.get(link_dts, allow_redirects=True)
open(dts_zip, 'wb').write(r1.content)

with zipfile.ZipFile(dts_zip, 'r') as zip_ref:
    zip_ref.extractall()

"""# Handle data"""

df = None
with open(dts_name, 'r') as fi:
    lines = fi.readlines() 
    print(lines[:6])
    lines = lines[4:]
    lines_ = [list(map(int, line.strip().split())) for line in lines ]
    print(lines_[:4])
    df = pd.DataFrame(data=lines_, columns=['node_1', 'node_2', 'group', 'timestamp'])

print()
print(df.dtypes)

df.info()

df.describe()

"""We will drop `group` column and which row has value `timestamp = 0`. We can not create a temporal network without getting time stamp"""

df.drop(columns='group', inplace=True)

df = df[df.timestamp != 0]

df.describe()

"""# Creating dynamic graph
Divide timestamp to `k` bin means `k` graph. Afterthat, we have 1 dynamic graph with `k` snapshot (static graph)
"""

k = 25

timestamp_range = (df.timestamp.max() - df.timestamp.min() + 1)//k 
timestamp_range

graphs_df = []
print("Start time: ", datetime.fromtimestamp(df.timestamp.min()) )
for i in range(k):
    upper_time = df.timestamp.min() + timestamp_range*(i+1)
    print(f"[{i}|\tUpper_time= {datetime.fromtimestamp(upper_time)}\t |Row|= {len(df[df.timestamp<upper_time])}")
    if i == k-1:
        graph_df = df.copy()
    else:
        graph_df = df[df.timestamp<upper_time].copy()
    graphs_df.append(graph_df)

graphs = []
for i in range(k):
    g = nx.from_pandas_edgelist(graphs_df[i], "node_1", "node_2", create_using=nx.Graph())
    graphs.append(g)
    print(f"Graph {i+1}:\t|V|={g.number_of_nodes()}\t|E|={g.number_of_edges()}")

"""# Save dynamic graph"""

NUMBER_SAVE_GRAPH = 10

# TODO: check folder address before running
folder = "./data/fb"
if not os.path.exists(folder):
    os.makedirs(folder)

print("Saving edges list to disk...")
for i in range(min(NUMBER_SAVE_GRAPH, k)):
    nx.write_edgelist(graphs[i],f'{folder}/graph_{str(i//10)+str(i%10)}.edgelist',data=False)
    print(f"Saved graph {i}: \t|V|={graphs[i].number_of_nodes()}\t|E|={graphs[i].number_of_edges()}")
